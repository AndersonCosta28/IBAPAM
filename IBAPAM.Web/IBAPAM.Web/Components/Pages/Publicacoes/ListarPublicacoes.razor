@page "/publicacoes"
@using IBAPAM.Shared.DTOs.Publicacao
@using IBAPAM.Web.Client.Interfaces
@inject IPublicacaoService PublicacaoService
@inject NavigationManager Navigation
@rendermode InteractiveAuto
<RadzenStack Style="padding: 20px">

    <RadzenText TextStyle="TextStyle.DisplayH3">Listar Publicações</RadzenText>

    <RadzenButton Text="Criar Nova Publicação" Click="@PublicacaoService.NavegarParaTelaDeCriacao" Style="width: fit-content" />
    <RadzenDataGrid style="height: 335px"
                    @ref="_grid"
                    IsLoading=@_isLoading
                    Count="@_count"
                    Data="@_publicacoes"
                    LoadData="@LoadData"
                    AllowSorting="true"
                    AllowFiltering="true"
                    AllowPaging="true"
                    PageSize="4"
                    PagerHorizontalAlign="HorizontalAlign.Center"
                    ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(PublicacaoDto.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" />
            <RadzenDataGridColumn Property="@nameof(PublicacaoDto.Titulo)" Filterable="false" Title="Título" Frozen="true" Width="160px" />
            <RadzenDataGridColumn Title="Ações" Filterable="false">
                <Template Context="publicacao">
                    <RadzenButton Text="Editar" Click="(e) => PublicacaoService.NavegarParaTelaDeEdicao(publicacao.Id)" Style="margin-bottom: 20px;" />
                    <RadzenButton Text="Deletar" Click="async (e) => await DeletarPublicacao(publicacao.Id)" Style="margin-bottom: 20px;" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenStack>
@code {
    RadzenDataGrid<PublicacaoDto> _grid;
    int _count;
    bool _isLoading = false;
    private IEnumerable<PublicacaoDto> _publicacoes = [];

    protected override async Task OnInitializedAsync()
    {
        _publicacoes = await PublicacaoService.GetAllAsync();
    }

    private async Task DeletarPublicacao(int id)
    {
        await PublicacaoService.DeleteAsync(id);
        _publicacoes = await PublicacaoService.GetAllAsync();
    }

    async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;

        await Task.Yield();

        var query = await PublicacaoService.GetAllAsync();

        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        _count = query.Count();

        // Perform paging via Skip and Take.
        _publicacoes = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        _isLoading = false;
    }
}
